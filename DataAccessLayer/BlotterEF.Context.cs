//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccessLayer
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BlotterEntity : DbContext
    {
        public BlotterEntity()
            : base("name=BlotterEntity")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<BlotterSBP_Reserved> BlotterSBP_Reserved { get; set; }
        public virtual DbSet<Branches> Branches { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<GazettedHoliday> GazettedHolidays { get; set; }
        public virtual DbSet<NostroBank> NostroBanks { get; set; }
        public virtual DbSet<SBP_BlotterBai_Muajjal> SBP_BlotterBai_Muajjal { get; set; }
        public virtual DbSet<SBP_BlotterBreakups> SBP_BlotterBreakups { get; set; }
        public virtual DbSet<SBP_BlotterClearing> SBP_BlotterClearing { get; set; }
        public virtual DbSet<SBP_BlotterCRD> SBP_BlotterCRD { get; set; }
        public virtual DbSet<SBP_BlotterCRRFINCON> SBP_BlotterCRRFINCON { get; set; }
        public virtual DbSet<SBP_BlotterCRRReportCalcSetup> SBP_BlotterCRRReportCalcSetup { get; set; }
        public virtual DbSet<SBP_BlotterCRRReportDaysWiseBal> SBP_BlotterCRRReportDaysWiseBal { get; set; }
        public virtual DbSet<SBP_BlotterCRRReportingCurrencyWise> SBP_BlotterCRRReportingCurrencyWise { get; set; }
        public virtual DbSet<SBP_BlotterDLDT> SBP_BlotterDLDT { get; set; }
        public virtual DbSet<SBP_BlotterDMMO> SBP_BlotterDMMO { get; set; }
        public virtual DbSet<SBP_BlotterDTLDaysWiseBal> SBP_BlotterDTLDaysWiseBal { get; set; }
        public virtual DbSet<SBP_BlotterFundingRepo> SBP_BlotterFundingRepo { get; set; }
        public virtual DbSet<SBP_BlotterFundsTransfer> SBP_BlotterFundsTransfer { get; set; }
        public virtual DbSet<SBP_BlotterImportExport> SBP_BlotterImportExport { get; set; }
        public virtual DbSet<SBP_BlotterManualData> SBP_BlotterManualData { get; set; }
        public virtual DbSet<SBP_BlotterOpeningBalance> SBP_BlotterOpeningBalance { get; set; }
        public virtual DbSet<SBP_BlotterOpeningClosingBalanceDIfferential> SBP_BlotterOpeningClosingBalanceDIfferential { get; set; }
        public virtual DbSet<SBP_BlotterOutrights> SBP_BlotterOutrights { get; set; }
        public virtual DbSet<SBP_BlotterRTGS> SBP_BlotterRTGS { get; set; }
        public virtual DbSet<SBP_BlotterTBO> SBP_BlotterTBO { get; set; }
        public virtual DbSet<SBP_BlotterTrade> SBP_BlotterTrade { get; set; }
        public virtual DbSet<SBP_LoginInfo> SBP_LoginInfo { get; set; }
        public virtual DbSet<UserPageRelation> UserPageRelations { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<UserRoleRelation> UserRoleRelations { get; set; }
        public virtual DbSet<WebPage> WebPages { get; set; }
        public virtual DbSet<SBP_BlotterCRRReportDaysWiseBalTemp> SBP_BlotterCRRReportDaysWiseBalTemp { get; set; }
        public virtual DbSet<SBP_BlotterCRRReportFCY> SBP_BlotterCRRReportFCY { get; set; }
        public virtual DbSet<SBP_BlotterRECON> SBP_BlotterRECON { get; set; }
        public virtual DbSet<SBP_BlotterReserved> SBP_BlotterReserved { get; set; }
        public virtual DbSet<UserCurrencyRelation> UserCurrencyRelations { get; set; }
        public virtual DbSet<SBP_BlotterManualEstBalance> SBP_BlotterManualEstBalance { get; set; }
        public virtual DbSet<BlotterDataColor> BlotterDataColors { get; set; }
        public virtual DbSet<OW_AUTH> OW_AUTH { get; set; }
        public virtual DbSet<OW_USERS> OW_USERS { get; set; }
        public virtual DbSet<SBP_BlotterBranchBalances> SBP_BlotterBranchBalances { get; set; }
        public virtual DbSet<SBP_BlotterDTL> SBP_BlotterDTL { get; set; }
        public virtual DbSet<SBP_BlotterFixedIncome> SBP_BlotterFixedIncome { get; set; }
        public virtual DbSet<SBP_BlotterFXDH> SBP_BlotterFXDH { get; set; }
        public virtual DbSet<SBP_BlotterFXDHSWAP> SBP_BlotterFXDHSWAP { get; set; }
        public virtual DbSet<SBP_BlotterManualDeals> SBP_BlotterManualDeals { get; set; }
        public virtual DbSet<SBP_BlotterOpening> SBP_BlotterOpening { get; set; }
        public virtual DbSet<SBP_BlotterReconBreakups> SBP_BlotterReconBreakups { get; set; }
        public virtual DbSet<SBP_BlotterRPRH> SBP_BlotterRPRH { get; set; }
        public virtual DbSet<SBP_BlotterSetup> SBP_BlotterSetup { get; set; }
        public virtual DbSet<SBP_BlotterSPSH> SBP_BlotterSPSH { get; set; }
        public virtual DbSet<SBP_BlotterTPOS> SBP_BlotterTPOS { get; set; }
        public virtual DbSet<SBP_BlotterTransactionsTotal> SBP_BlotterTransactionsTotal { get; set; }
        public virtual DbSet<SBP_BlotterTransactionTitles> SBP_BlotterTransactionTitles { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TEMPRECONCHECK> TEMPRECONCHECKs { get; set; }
        public virtual DbSet<TEMPRECONTEST> TEMPRECONTESTs { get; set; }
        public virtual DbSet<WeekEnd> WeekEnds { get; set; }
        public virtual DbSet<fx_maturity_profile> fx_maturity_profile { get; set; }
        public virtual DbSet<fxacuphbl1> fxacuphbl1 { get; set; }
        public virtual DbSet<OW_dblink> OW_dblink { get; set; }
        public virtual DbSet<SBP_BlotterConversionRate> SBP_BlotterConversionRate { get; set; }
        public virtual DbSet<SBP_BlotterRTGS1> SBP_BlotterRTGS1 { get; set; }
        public virtual DbSet<SBP_BlotterSessionDetails> SBP_BlotterSessionDetails { get; set; }
    
        public virtual int SP_ADD_ActivityMonitor(string pSessionID, Nullable<int> pUserID, string pIP, string pLoginGUID, string pData, string pActivity, string pURL)
        {
            var pSessionIDParameter = pSessionID != null ?
                new ObjectParameter("pSessionID", pSessionID) :
                new ObjectParameter("pSessionID", typeof(string));
    
            var pUserIDParameter = pUserID.HasValue ?
                new ObjectParameter("pUserID", pUserID) :
                new ObjectParameter("pUserID", typeof(int));
    
            var pIPParameter = pIP != null ?
                new ObjectParameter("pIP", pIP) :
                new ObjectParameter("pIP", typeof(string));
    
            var pLoginGUIDParameter = pLoginGUID != null ?
                new ObjectParameter("pLoginGUID", pLoginGUID) :
                new ObjectParameter("pLoginGUID", typeof(string));
    
            var pDataParameter = pData != null ?
                new ObjectParameter("pData", pData) :
                new ObjectParameter("pData", typeof(string));
    
            var pActivityParameter = pActivity != null ?
                new ObjectParameter("pActivity", pActivity) :
                new ObjectParameter("pActivity", typeof(string));
    
            var pURLParameter = pURL != null ?
                new ObjectParameter("pURL", pURL) :
                new ObjectParameter("pURL", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ADD_ActivityMonitor", pSessionIDParameter, pUserIDParameter, pIPParameter, pLoginGUIDParameter, pDataParameter, pActivityParameter, pURLParameter);
        }
    
        public virtual int SP_ADD_SessionStart(string pSessionID, Nullable<int> pUserID, string pIP, string pLoginGUID, Nullable<System.DateTime> pLoginTime, Nullable<System.DateTime> pExpires)
        {
            var pSessionIDParameter = pSessionID != null ?
                new ObjectParameter("pSessionID", pSessionID) :
                new ObjectParameter("pSessionID", typeof(string));
    
            var pUserIDParameter = pUserID.HasValue ?
                new ObjectParameter("pUserID", pUserID) :
                new ObjectParameter("pUserID", typeof(int));
    
            var pIPParameter = pIP != null ?
                new ObjectParameter("pIP", pIP) :
                new ObjectParameter("pIP", typeof(string));
    
            var pLoginGUIDParameter = pLoginGUID != null ?
                new ObjectParameter("pLoginGUID", pLoginGUID) :
                new ObjectParameter("pLoginGUID", typeof(string));
    
            var pLoginTimeParameter = pLoginTime.HasValue ?
                new ObjectParameter("pLoginTime", pLoginTime) :
                new ObjectParameter("pLoginTime", typeof(System.DateTime));
    
            var pExpiresParameter = pExpires.HasValue ?
                new ObjectParameter("pExpires", pExpires) :
                new ObjectParameter("pExpires", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ADD_SessionStart", pSessionIDParameter, pUserIDParameter, pIPParameter, pLoginGUIDParameter, pLoginTimeParameter, pExpiresParameter);
        }
    
        public virtual int SP_AddDaysInBlotterReport(Nullable<decimal> dTLValue, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> bR)
        {
            var dTLValueParameter = dTLValue.HasValue ?
                new ObjectParameter("DTLValue", dTLValue) :
                new ObjectParameter("DTLValue", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddDaysInBlotterReport", dTLValueParameter, startDateParameter, endDateParameter, bRParameter);
        }
    
        public virtual int SP_DeleteBlotterOutright(Nullable<long> id, Nullable<int> userID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteBlotterOutright", idParameter, userIDParameter);
        }
    
        public virtual int SP_DeleteHolidays(Nullable<int> gHID)
        {
            var gHIDParameter = gHID.HasValue ?
                new ObjectParameter("GHID", gHID) :
                new ObjectParameter("GHID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteHolidays", gHIDParameter);
        }
    
        public virtual int SP_DELETEUserPageRelation(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DELETEUserPageRelation", idParameter);
        }
    
        public virtual int SP_DeleteUserRole(Nullable<int> uRID)
        {
            var uRIDParameter = uRID.HasValue ?
                new ObjectParameter("URID", uRID) :
                new ObjectParameter("URID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteUserRole", uRIDParameter);
        }
    
        public virtual int SP_DeleteWebPages(Nullable<int> wPID)
        {
            var wPIDParameter = wPID.HasValue ?
                new ObjectParameter("WPID", wPID) :
                new ObjectParameter("WPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeleteWebPages", wPIDParameter);
        }
    
        public virtual ObjectResult<SP_GetAll_SBPBlotterClearing_Result> SP_GetAll_SBPBlotterClearing(Nullable<int> userID, Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR, string dateVal)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAll_SBPBlotterClearing_Result>("SP_GetAll_SBPBlotterClearing", userIDParameter, branchIDParameter, curIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetAll_SBPBlotterRTGS_Result> SP_GetAll_SBPBlotterRTGS(Nullable<int> userID, Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR, string dateVal)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAll_SBPBlotterRTGS_Result>("SP_GetAll_SBPBlotterRTGS", userIDParameter, branchIDParameter, curIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetAll_SBPBlotterTBO_Result> SP_GetAll_SBPBlotterTBO(Nullable<int> userID, Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR, string dateVal)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAll_SBPBlotterTBO_Result>("SP_GetAll_SBPBlotterTBO", userIDParameter, branchIDParameter, curIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetAll_SBPBlotterTrade_Result> SP_GetAll_SBPBlotterTrade(Nullable<int> userID, Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR, string dateVal)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAll_SBPBlotterTrade_Result>("SP_GetAll_SBPBlotterTrade", userIDParameter, branchIDParameter, curIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetAllBlotterCurrencyById_Result> SP_GetAllBlotterCurrencyById(Nullable<int> userid)
        {
            var useridParameter = userid.HasValue ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllBlotterCurrencyById_Result>("SP_GetAllBlotterCurrencyById", useridParameter);
        }
    
        public virtual ObjectResult<SP_GETAllClearingTransactionTitles_Result> SP_GETAllClearingTransactionTitles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETAllClearingTransactionTitles_Result>("SP_GETAllClearingTransactionTitles");
        }
    
        public virtual ObjectResult<SP_GetAllNostroBankList_Result> SP_GetAllNostroBankList(Nullable<int> currencyId)
        {
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("currencyId", currencyId) :
                new ObjectParameter("currencyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllNostroBankList_Result>("SP_GetAllNostroBankList", currencyIdParameter);
        }
    
        public virtual ObjectResult<SP_GetAllOpeningBalance_Result> SP_GetAllOpeningBalance(Nullable<int> userID, Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR, string dateVal)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllOpeningBalance_Result>("SP_GetAllOpeningBalance", userIDParameter, branchIDParameter, curIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetAllRsfTTTBO_Result> SP_GetAllRsfTTTBO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllRsfTTTBO_Result>("SP_GetAllRsfTTTBO");
        }
    
        public virtual ObjectResult<SP_GETAllRTGSTransactionTitles_Result> SP_GETAllRTGSTransactionTitles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETAllRTGSTransactionTitles_Result>("SP_GETAllRTGSTransactionTitles");
        }
    
        public virtual ObjectResult<SP_GETAllTBOTransactionTitles_Result> SP_GETAllTBOTransactionTitles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETAllTBOTransactionTitles_Result>("SP_GETAllTBOTransactionTitles");
        }
    
        public virtual ObjectResult<SP_GETAllTradeTransactionTitles_Result> SP_GETAllTradeTransactionTitles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETAllTradeTransactionTitles_Result>("SP_GETAllTradeTransactionTitles");
        }
    
        public virtual ObjectResult<SP_GetAllUserPageRelations_Result> SP_GetAllUserPageRelations(Nullable<int> roleid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("Roleid", roleid) :
                new ObjectParameter("Roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllUserPageRelations_Result>("SP_GetAllUserPageRelations", roleidParameter);
        }
    
        public virtual ObjectResult<sp_GetAllUsers_Result> sp_GetAllUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllUsers_Result>("sp_GetAllUsers");
        }
    
        public virtual ObjectResult<SP_GetAllWebPages_Result> SP_GetAllWebPages(Nullable<int> wPID)
        {
            var wPIDParameter = wPID.HasValue ?
                new ObjectParameter("WPID", wPID) :
                new ObjectParameter("WPID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAllWebPages_Result>("SP_GetAllWebPages", wPIDParameter);
        }
    
        public virtual ObjectResult<SP_GETLatestBlotterDTLReportDayWise_Result> SP_GETLatestBlotterDTLReportDayWise(Nullable<int> bR, string startdate, string enddate)
        {
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETLatestBlotterDTLReportDayWise_Result>("SP_GETLatestBlotterDTLReportDayWise", bRParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<SP_GETLatestBlotterDTLReportForToday_Result> SP_GETLatestBlotterDTLReportForToday(Nullable<int> bR)
        {
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETLatestBlotterDTLReportForToday_Result>("SP_GETLatestBlotterDTLReportForToday", bRParameter);
        }
    
        public virtual ObjectResult<SP_GetLatestBreakup_Result> SP_GetLatestBreakup(Nullable<int> userID, Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetLatestBreakup_Result>("SP_GetLatestBreakup", userIDParameter, branchIDParameter, curIDParameter, bRParameter);
        }
    
        public virtual ObjectResult<SP_GetNotListedUserPageRelations_Result> SP_GetNotListedUserPageRelations(Nullable<int> roleid)
        {
            var roleidParameter = roleid.HasValue ?
                new ObjectParameter("Roleid", roleid) :
                new ObjectParameter("Roleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNotListedUserPageRelations_Result>("SP_GetNotListedUserPageRelations", roleidParameter);
        }
    
        public virtual ObjectResult<SP_GetOpeningBalance_Result> SP_GetOpeningBalance(Nullable<int> bR, Nullable<System.DateTime> date)
        {
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetOpeningBalance_Result>("SP_GetOpeningBalance", bRParameter, dateParameter);
        }
    
        public virtual ObjectResult<SP_GetOPICSManualData_Result> SP_GetOPICSManualData(Nullable<int> bR, Nullable<System.DateTime> date, string flag)
        {
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetOPICSManualData_Result>("SP_GetOPICSManualData", bRParameter, dateParameter, flagParameter);
        }
    
        public virtual ObjectResult<SP_GetSBP_BlotterImportExport_Result> SP_GetSBP_BlotterImportExport(Nullable<int> userID, Nullable<int> branchID, Nullable<int> bR, string dateVal)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBP_BlotterImportExport_Result>("SP_GetSBP_BlotterImportExport", userIDParameter, branchIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetSBP_CRRReportingFCYCurrWise_Result> SP_GetSBP_CRRReportingFCYCurrWise(Nullable<int> bR, Nullable<int> userID, Nullable<int> branchID, string startdate, string enddate)
        {
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("Startdate", startdate) :
                new ObjectParameter("Startdate", typeof(string));
    
            var enddateParameter = enddate != null ?
                new ObjectParameter("Enddate", enddate) :
                new ObjectParameter("Enddate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBP_CRRReportingFCYCurrWise_Result>("SP_GetSBP_CRRReportingFCYCurrWise", bRParameter, userIDParameter, branchIDParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<SP_GetSBP_DMMO_Result> SP_GetSBP_DMMO(Nullable<int> userID, Nullable<int> branchID, Nullable<int> bR, string dateVal)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBP_DMMO_Result>("SP_GetSBP_DMMO", userIDParameter, branchIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetSBP_Reserved_Result> SP_GetSBP_Reserved(Nullable<int> userID, Nullable<int> branchID, Nullable<int> bR)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBP_Reserved_Result>("SP_GetSBP_Reserved", userIDParameter, branchIDParameter, bRParameter);
        }
    
        public virtual ObjectResult<SP_GetSBPBlotterCRD_Result> SP_GetSBPBlotterCRD(Nullable<int> userID, Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR, string dateVal)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBPBlotterCRD_Result>("SP_GetSBPBlotterCRD", userIDParameter, branchIDParameter, curIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetSBPBlotterCRRFINCON_Result> SP_GetSBPBlotterCRRFINCON(Nullable<int> userID, Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR, Nullable<System.DateTime> satrtDate, Nullable<System.DateTime> endDate)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var satrtDateParameter = satrtDate.HasValue ?
                new ObjectParameter("SatrtDate", satrtDate) :
                new ObjectParameter("SatrtDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBPBlotterCRRFINCON_Result>("SP_GetSBPBlotterCRRFINCON", userIDParameter, branchIDParameter, curIDParameter, bRParameter, satrtDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<SP_GetSBPBlotterCRRReportFCY_Result> SP_GetSBPBlotterCRRReportFCY(Nullable<int> userID, Nullable<int> branchID, Nullable<int> bR)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBPBlotterCRRReportFCY_Result>("SP_GetSBPBlotterCRRReportFCY", userIDParameter, branchIDParameter, bRParameter);
        }
    
        public virtual ObjectResult<SP_GetSBPBlotterFR_Result> SP_GetSBPBlotterFR(Nullable<int> userID, Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR, string dateVal)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBPBlotterFR_Result>("SP_GetSBPBlotterFR", userIDParameter, branchIDParameter, curIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetSBPBlotterGH_Result> SP_GetSBPBlotterGH(Nullable<int> gHID)
        {
            var gHIDParameter = gHID.HasValue ?
                new ObjectParameter("GHID", gHID) :
                new ObjectParameter("GHID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBPBlotterGH_Result>("SP_GetSBPBlotterGH", gHIDParameter);
        }
    
        public virtual ObjectResult<SP_GetSBPBlotterOpeningClosingBalanceDIfferential_Result> SP_GetSBPBlotterOpeningClosingBalanceDIfferential(Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR, string dateVal)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBPBlotterOpeningClosingBalanceDIfferential_Result>("SP_GetSBPBlotterOpeningClosingBalanceDIfferential", branchIDParameter, curIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetSBPBlotterOutRright_Result> SP_GetSBPBlotterOutRright(Nullable<int> bR, string dateVal)
        {
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBPBlotterOutRright_Result>("SP_GetSBPBlotterOutRright", bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetSBPBlotterRECON_Result> SP_GetSBPBlotterRECON(Nullable<int> userID, Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR, string dateVal)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSBPBlotterRECON_Result>("SP_GetSBPBlotterRECON", userIDParameter, branchIDParameter, curIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GetUserPageRelationById_Result> SP_GetUserPageRelationById(Nullable<int> uPRID)
        {
            var uPRIDParameter = uPRID.HasValue ?
                new ObjectParameter("UPRID", uPRID) :
                new ObjectParameter("UPRID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserPageRelationById_Result>("SP_GetUserPageRelationById", uPRIDParameter);
        }
    
        public virtual ObjectResult<SP_GETUserRoles_Result> SP_GETUserRoles(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETUserRoles_Result>("SP_GETUserRoles", idParameter);
        }
    
        public virtual int SP_InsertBlotterOutright(string dataType, string bank, Nullable<double> rate, Nullable<System.DateTime> issue_Date, string issueType, string broker, Nullable<decimal> inFlow, Nullable<decimal> outFLow, string note, Nullable<int> userID, Nullable<int> bR)
        {
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var issue_DateParameter = issue_Date.HasValue ?
                new ObjectParameter("Issue_Date", issue_Date) :
                new ObjectParameter("Issue_Date", typeof(System.DateTime));
    
            var issueTypeParameter = issueType != null ?
                new ObjectParameter("IssueType", issueType) :
                new ObjectParameter("IssueType", typeof(string));
    
            var brokerParameter = broker != null ?
                new ObjectParameter("Broker", broker) :
                new ObjectParameter("Broker", typeof(string));
    
            var inFlowParameter = inFlow.HasValue ?
                new ObjectParameter("InFlow", inFlow) :
                new ObjectParameter("InFlow", typeof(decimal));
    
            var outFLowParameter = outFLow.HasValue ?
                new ObjectParameter("OutFLow", outFLow) :
                new ObjectParameter("OutFLow", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertBlotterOutright", dataTypeParameter, bankParameter, rateParameter, issue_DateParameter, issueTypeParameter, brokerParameter, inFlowParameter, outFLowParameter, noteParameter, userIDParameter, bRParameter);
        }
    
        public virtual int SP_InsertHolidays(string holidayTitle, string gHDescription, Nullable<System.DateTime> gHDate, Nullable<int> userID)
        {
            var holidayTitleParameter = holidayTitle != null ?
                new ObjectParameter("HolidayTitle", holidayTitle) :
                new ObjectParameter("HolidayTitle", typeof(string));
    
            var gHDescriptionParameter = gHDescription != null ?
                new ObjectParameter("GHDescription", gHDescription) :
                new ObjectParameter("GHDescription", typeof(string));
    
            var gHDateParameter = gHDate.HasValue ?
                new ObjectParameter("GHDate", gHDate) :
                new ObjectParameter("GHDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertHolidays", holidayTitleParameter, gHDescriptionParameter, gHDateParameter, userIDParameter);
        }
    
        public virtual int SP_InsertLoginInfo(string userName, string password, string contactNo, string email, string department, Nullable<int> branchID, Nullable<bool> isActive, Nullable<bool> isConventional, Nullable<bool> isislamic, Nullable<System.DateTime> createDate, string blotterType, Nullable<int> uRID)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isConventionalParameter = isConventional.HasValue ?
                new ObjectParameter("isConventional", isConventional) :
                new ObjectParameter("isConventional", typeof(bool));
    
            var isislamicParameter = isislamic.HasValue ?
                new ObjectParameter("isislamic", isislamic) :
                new ObjectParameter("isislamic", typeof(bool));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var blotterTypeParameter = blotterType != null ?
                new ObjectParameter("BlotterType", blotterType) :
                new ObjectParameter("BlotterType", typeof(string));
    
            var uRIDParameter = uRID.HasValue ?
                new ObjectParameter("URID", uRID) :
                new ObjectParameter("URID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertLoginInfo", userNameParameter, passwordParameter, contactNoParameter, emailParameter, departmentParameter, branchIDParameter, isActiveParameter, isConventionalParameter, isislamicParameter, createDateParameter, blotterTypeParameter, uRIDParameter);
        }
    
        public virtual ObjectResult<SP_InsertOpeningBalance_Result> SP_InsertOpeningBalance(Nullable<decimal> openBalActual, Nullable<decimal> adjOpenBal, Nullable<System.DateTime> balDate, string dataType, Nullable<int> userID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> updateDate, Nullable<int> bR, Nullable<int> bID, Nullable<int> curID, string flag, Nullable<decimal> estimatedOpenBal)
        {
            var openBalActualParameter = openBalActual.HasValue ?
                new ObjectParameter("OpenBalActual", openBalActual) :
                new ObjectParameter("OpenBalActual", typeof(decimal));
    
            var adjOpenBalParameter = adjOpenBal.HasValue ?
                new ObjectParameter("AdjOpenBal", adjOpenBal) :
                new ObjectParameter("AdjOpenBal", typeof(decimal));
    
            var balDateParameter = balDate.HasValue ?
                new ObjectParameter("BalDate", balDate) :
                new ObjectParameter("BalDate", typeof(System.DateTime));
    
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var bIDParameter = bID.HasValue ?
                new ObjectParameter("BID", bID) :
                new ObjectParameter("BID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var estimatedOpenBalParameter = estimatedOpenBal.HasValue ?
                new ObjectParameter("EstimatedOpenBal", estimatedOpenBal) :
                new ObjectParameter("EstimatedOpenBal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_InsertOpeningBalance_Result>("SP_InsertOpeningBalance", openBalActualParameter, adjOpenBalParameter, balDateParameter, dataTypeParameter, userIDParameter, createDateParameter, updateDateParameter, bRParameter, bIDParameter, curIDParameter, flagParameter, estimatedOpenBalParameter);
        }
    
        public virtual int SP_INSERTUserPageRelation(Nullable<int> uRID, Nullable<int> wPID, Nullable<bool> dateChangeAccess, Nullable<bool> editAccess, Nullable<bool> deleteAccess)
        {
            var uRIDParameter = uRID.HasValue ?
                new ObjectParameter("URID", uRID) :
                new ObjectParameter("URID", typeof(int));
    
            var wPIDParameter = wPID.HasValue ?
                new ObjectParameter("WPID", wPID) :
                new ObjectParameter("WPID", typeof(int));
    
            var dateChangeAccessParameter = dateChangeAccess.HasValue ?
                new ObjectParameter("DateChangeAccess", dateChangeAccess) :
                new ObjectParameter("DateChangeAccess", typeof(bool));
    
            var editAccessParameter = editAccess.HasValue ?
                new ObjectParameter("EditAccess", editAccess) :
                new ObjectParameter("EditAccess", typeof(bool));
    
            var deleteAccessParameter = deleteAccess.HasValue ?
                new ObjectParameter("DeleteAccess", deleteAccess) :
                new ObjectParameter("DeleteAccess", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_INSERTUserPageRelation", uRIDParameter, wPIDParameter, dateChangeAccessParameter, editAccessParameter, deleteAccessParameter);
        }
    
        public virtual int SP_InsertUserRole(string roleName, Nullable<bool> isActive)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertUserRole", roleNameParameter, isActiveParameter);
        }
    
        public virtual int SP_InsertWebPages(string pageName, string controllerName, string displayName, string pageDescription, Nullable<bool> isActive, Nullable<int> blotterType)
        {
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var pageDescriptionParameter = pageDescription != null ?
                new ObjectParameter("PageDescription", pageDescription) :
                new ObjectParameter("PageDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var blotterTypeParameter = blotterType.HasValue ?
                new ObjectParameter("BlotterType", blotterType) :
                new ObjectParameter("BlotterType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertWebPages", pageNameParameter, controllerNameParameter, displayNameParameter, pageDescriptionParameter, isActiveParameter, blotterTypeParameter);
        }
    
        public virtual ObjectResult<SP_ReconcileOPICSManualData_Result> SP_ReconcileOPICSManualData(Nullable<int> bR, Nullable<System.DateTime> date)
        {
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ReconcileOPICSManualData_Result>("SP_ReconcileOPICSManualData", bRParameter, dateParameter);
        }
    
        public virtual int SP_ReconcileOPICSManualDataFwd(Nullable<int> bR, Nullable<System.DateTime> date, Nullable<bool> fillDumpBlotter)
        {
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var fillDumpBlotterParameter = fillDumpBlotter.HasValue ?
                new ObjectParameter("FillDumpBlotter", fillDumpBlotter) :
                new ObjectParameter("FillDumpBlotter", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ReconcileOPICSManualDataFwd", bRParameter, dateParameter, fillDumpBlotterParameter);
        }
    
        public virtual ObjectResult<SP_SBPBlotter_Result> SP_SBPBlotter(string br, string dataType, Nullable<System.DateTime> selectedDate)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var selectedDateParameter = selectedDate.HasValue ?
                new ObjectParameter("SelectedDate", selectedDate) :
                new ObjectParameter("SelectedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SBPBlotter_Result>("SP_SBPBlotter", brParameter, dataTypeParameter, selectedDateParameter);
        }
    
        public virtual int SP_SBPFillDumBlotter(Nullable<System.DateTime> currentDT, Nullable<int> br)
        {
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            var brParameter = br.HasValue ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPFillDumBlotter", currentDTParameter, brParameter);
        }
    
        public virtual int SP_SBPFillDumBlotterFCY(string br, Nullable<System.DateTime> currentDT, Nullable<long> curId)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            var curIdParameter = curId.HasValue ?
                new ObjectParameter("CurId", curId) :
                new ObjectParameter("CurId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPFillDumBlotterFCY", brParameter, currentDTParameter, curIdParameter);
        }
    
        public virtual ObjectResult<SP_SBPGetLoginInfo_Result> SP_SBPGetLoginInfo(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SBPGetLoginInfo_Result>("SP_SBPGetLoginInfo", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<SP_SBPGetLoginInfoById_Result> SP_SBPGetLoginInfoById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SBPGetLoginInfoById_Result>("SP_SBPGetLoginInfoById", idParameter);
        }
    
        public virtual int SP_SBPSessionStop(string pSessionID, Nullable<int> pUserID)
        {
            var pSessionIDParameter = pSessionID != null ?
                new ObjectParameter("pSessionID", pSessionID) :
                new ObjectParameter("pSessionID", typeof(string));
    
            var pUserIDParameter = pUserID.HasValue ?
                new ObjectParameter("pUserID", pUserID) :
                new ObjectParameter("pUserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPSessionStop", pSessionIDParameter, pUserIDParameter);
        }
    
        public virtual int SP_UpdateBlotterOutright(Nullable<long> id, string dataType, string bank, Nullable<double> rate, Nullable<System.DateTime> issue_Date, string issueType, string broker, Nullable<decimal> inFlow, Nullable<decimal> outFLow, string note, Nullable<int> userID, Nullable<int> bR)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(long));
    
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var bankParameter = bank != null ?
                new ObjectParameter("Bank", bank) :
                new ObjectParameter("Bank", typeof(string));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(double));
    
            var issue_DateParameter = issue_Date.HasValue ?
                new ObjectParameter("Issue_Date", issue_Date) :
                new ObjectParameter("Issue_Date", typeof(System.DateTime));
    
            var issueTypeParameter = issueType != null ?
                new ObjectParameter("IssueType", issueType) :
                new ObjectParameter("IssueType", typeof(string));
    
            var brokerParameter = broker != null ?
                new ObjectParameter("Broker", broker) :
                new ObjectParameter("Broker", typeof(string));
    
            var inFlowParameter = inFlow.HasValue ?
                new ObjectParameter("InFlow", inFlow) :
                new ObjectParameter("InFlow", typeof(decimal));
    
            var outFLowParameter = outFLow.HasValue ?
                new ObjectParameter("OutFLow", outFLow) :
                new ObjectParameter("OutFLow", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateBlotterOutright", idParameter, dataTypeParameter, bankParameter, rateParameter, issue_DateParameter, issueTypeParameter, brokerParameter, inFlowParameter, outFLowParameter, noteParameter, userIDParameter, bRParameter);
        }
    
        public virtual int SP_UpdateDaysInBlotterReport(Nullable<decimal> dTLValue, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> bR)
        {
            var dTLValueParameter = dTLValue.HasValue ?
                new ObjectParameter("DTLValue", dTLValue) :
                new ObjectParameter("DTLValue", typeof(decimal));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateDaysInBlotterReport", dTLValueParameter, startDateParameter, endDateParameter, bRParameter);
        }
    
        public virtual int SP_UpdateHolidays(Nullable<int> gHID, string holidayTitle, string gHDescription, Nullable<System.DateTime> gHDate, Nullable<int> userID)
        {
            var gHIDParameter = gHID.HasValue ?
                new ObjectParameter("GHID", gHID) :
                new ObjectParameter("GHID", typeof(int));
    
            var holidayTitleParameter = holidayTitle != null ?
                new ObjectParameter("HolidayTitle", holidayTitle) :
                new ObjectParameter("HolidayTitle", typeof(string));
    
            var gHDescriptionParameter = gHDescription != null ?
                new ObjectParameter("GHDescription", gHDescription) :
                new ObjectParameter("GHDescription", typeof(string));
    
            var gHDateParameter = gHDate.HasValue ?
                new ObjectParameter("GHDate", gHDate) :
                new ObjectParameter("GHDate", typeof(System.DateTime));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateHolidays", gHIDParameter, holidayTitleParameter, gHDescriptionParameter, gHDateParameter, userIDParameter);
        }
    
        public virtual int SP_UpdateLoginInfo(Nullable<int> id, string userName, string password, string contactNo, string email, Nullable<int> branchID, string department, Nullable<bool> isActive, Nullable<bool> isConventional, Nullable<bool> isislamic, Nullable<System.DateTime> createDate, string blotterType, Nullable<int> uRID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var isConventionalParameter = isConventional.HasValue ?
                new ObjectParameter("isConventional", isConventional) :
                new ObjectParameter("isConventional", typeof(bool));
    
            var isislamicParameter = isislamic.HasValue ?
                new ObjectParameter("isislamic", isislamic) :
                new ObjectParameter("isislamic", typeof(bool));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var blotterTypeParameter = blotterType != null ?
                new ObjectParameter("BlotterType", blotterType) :
                new ObjectParameter("BlotterType", typeof(string));
    
            var uRIDParameter = uRID.HasValue ?
                new ObjectParameter("URID", uRID) :
                new ObjectParameter("URID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateLoginInfo", idParameter, userNameParameter, passwordParameter, contactNoParameter, emailParameter, branchIDParameter, departmentParameter, isActiveParameter, isConventionalParameter, isislamicParameter, createDateParameter, blotterTypeParameter, uRIDParameter);
        }
    
        public virtual ObjectResult<SP_UpdateOpeningBalance_Result> SP_UpdateOpeningBalance(Nullable<long> id, Nullable<decimal> openBalActual, Nullable<decimal> adjOpenBal, Nullable<System.DateTime> balDate, string dataType, Nullable<int> userID, Nullable<System.DateTime> createDate, Nullable<System.DateTime> updateDate, Nullable<int> bR, Nullable<int> bID, Nullable<int> curID, string flag, Nullable<decimal> estimatedOpenBal)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var openBalActualParameter = openBalActual.HasValue ?
                new ObjectParameter("OpenBalActual", openBalActual) :
                new ObjectParameter("OpenBalActual", typeof(decimal));
    
            var adjOpenBalParameter = adjOpenBal.HasValue ?
                new ObjectParameter("AdjOpenBal", adjOpenBal) :
                new ObjectParameter("AdjOpenBal", typeof(decimal));
    
            var balDateParameter = balDate.HasValue ?
                new ObjectParameter("BalDate", balDate) :
                new ObjectParameter("BalDate", typeof(System.DateTime));
    
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var updateDateParameter = updateDate.HasValue ?
                new ObjectParameter("UpdateDate", updateDate) :
                new ObjectParameter("UpdateDate", typeof(System.DateTime));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var bIDParameter = bID.HasValue ?
                new ObjectParameter("BID", bID) :
                new ObjectParameter("BID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var flagParameter = flag != null ?
                new ObjectParameter("Flag", flag) :
                new ObjectParameter("Flag", typeof(string));
    
            var estimatedOpenBalParameter = estimatedOpenBal.HasValue ?
                new ObjectParameter("EstimatedOpenBal", estimatedOpenBal) :
                new ObjectParameter("EstimatedOpenBal", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_UpdateOpeningBalance_Result>("SP_UpdateOpeningBalance", idParameter, openBalActualParameter, adjOpenBalParameter, balDateParameter, dataTypeParameter, userIDParameter, createDateParameter, updateDateParameter, bRParameter, bIDParameter, curIDParameter, flagParameter, estimatedOpenBalParameter);
        }
    
        public virtual int SP_UPDATEUserPageRelation(Nullable<int> id, Nullable<int> uRID, Nullable<int> wPID, Nullable<bool> dateChangeAccess, Nullable<bool> editAccess, Nullable<bool> deleteAccess)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var uRIDParameter = uRID.HasValue ?
                new ObjectParameter("URID", uRID) :
                new ObjectParameter("URID", typeof(int));
    
            var wPIDParameter = wPID.HasValue ?
                new ObjectParameter("WPID", wPID) :
                new ObjectParameter("WPID", typeof(int));
    
            var dateChangeAccessParameter = dateChangeAccess.HasValue ?
                new ObjectParameter("DateChangeAccess", dateChangeAccess) :
                new ObjectParameter("DateChangeAccess", typeof(bool));
    
            var editAccessParameter = editAccess.HasValue ?
                new ObjectParameter("EditAccess", editAccess) :
                new ObjectParameter("EditAccess", typeof(bool));
    
            var deleteAccessParameter = deleteAccess.HasValue ?
                new ObjectParameter("DeleteAccess", deleteAccess) :
                new ObjectParameter("DeleteAccess", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UPDATEUserPageRelation", idParameter, uRIDParameter, wPIDParameter, dateChangeAccessParameter, editAccessParameter, deleteAccessParameter);
        }
    
        public virtual ObjectResult<Nullable<bool>> SP_UpdateUserPassword(Nullable<int> userId, string oldPassword, string newPassword)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<bool>>("SP_UpdateUserPassword", userIdParameter, oldPasswordParameter, newPasswordParameter);
        }
    
        public virtual int SP_UPDATEUserRole(Nullable<int> uRID, string roleName, Nullable<bool> isActive)
        {
            var uRIDParameter = uRID.HasValue ?
                new ObjectParameter("URID", uRID) :
                new ObjectParameter("URID", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UPDATEUserRole", uRIDParameter, roleNameParameter, isActiveParameter);
        }
    
        public virtual int SP_UpdateWebPages(Nullable<int> wPID, string pageName, string controllerName, string displayName, string pageDescription, Nullable<bool> isActive, Nullable<int> blotterType)
        {
            var wPIDParameter = wPID.HasValue ?
                new ObjectParameter("WPID", wPID) :
                new ObjectParameter("WPID", typeof(int));
    
            var pageNameParameter = pageName != null ?
                new ObjectParameter("PageName", pageName) :
                new ObjectParameter("PageName", typeof(string));
    
            var controllerNameParameter = controllerName != null ?
                new ObjectParameter("ControllerName", controllerName) :
                new ObjectParameter("ControllerName", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var pageDescriptionParameter = pageDescription != null ?
                new ObjectParameter("PageDescription", pageDescription) :
                new ObjectParameter("PageDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var blotterTypeParameter = blotterType.HasValue ?
                new ObjectParameter("BlotterType", blotterType) :
                new ObjectParameter("BlotterType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateWebPages", wPIDParameter, pageNameParameter, controllerNameParameter, displayNameParameter, pageDescriptionParameter, isActiveParameter, blotterTypeParameter);
        }
    
        public virtual ObjectResult<sp_GetUserById_Result> sp_GetUserById(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserById_Result>("sp_GetUserById", idParameter);
        }
    
        public virtual int SP_SBPBlotter_FCY(string br, Nullable<int> curr, string currentDT, string nostroBankCode)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            var currParameter = curr.HasValue ?
                new ObjectParameter("Curr", curr) :
                new ObjectParameter("Curr", typeof(int));
    
            var currentDTParameter = currentDT != null ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(string));
    
            var nostroBankCodeParameter = nostroBankCode != null ?
                new ObjectParameter("NostroBankCode", nostroBankCode) :
                new ObjectParameter("NostroBankCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotter_FCY", brParameter, currParameter, currentDTParameter, nostroBankCodeParameter);
        }
    
        public virtual ObjectResult<SP_GETLatestBlotterDTLPerDayWise_Result> SP_GETLatestBlotterDTLPerDayWise(Nullable<int> bR, string startdate)
        {
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var startdateParameter = startdate != null ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETLatestBlotterDTLPerDayWise_Result>("SP_GETLatestBlotterDTLPerDayWise", bRParameter, startdateParameter);
        }
    
        public virtual int SP_DELETEReconBreakups(Nullable<int> id, Nullable<int> userID)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DELETEReconBreakups", idParameter, userIDParameter);
        }
    
        public virtual ObjectResult<SP_GetAll_SBPBlotterReconBreakups_Result> SP_GetAll_SBPBlotterReconBreakups(Nullable<int> userID, Nullable<int> branchID, Nullable<int> curID, Nullable<int> bR, string dateVal)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            var curIDParameter = curID.HasValue ?
                new ObjectParameter("CurID", curID) :
                new ObjectParameter("CurID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var dateValParameter = dateVal != null ?
                new ObjectParameter("DateVal", dateVal) :
                new ObjectParameter("DateVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetAll_SBPBlotterReconBreakups_Result>("SP_GetAll_SBPBlotterReconBreakups", userIDParameter, branchIDParameter, curIDParameter, bRParameter, dateValParameter);
        }
    
        public virtual ObjectResult<SP_GETAllRECONBreakupsTransactionTitles_Result> SP_GETAllRECONBreakupsTransactionTitles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GETAllRECONBreakupsTransactionTitles_Result>("SP_GETAllRECONBreakupsTransactionTitles");
        }
    
        public virtual int SP_InsertBlotterReconBreakups(string dataType, Nullable<int> tTID, Nullable<System.DateTime> reconDate, string reconCode, Nullable<decimal> reconInflow, Nullable<decimal> outFLow, string note, Nullable<int> userID, Nullable<int> bR)
        {
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var tTIDParameter = tTID.HasValue ?
                new ObjectParameter("TTID", tTID) :
                new ObjectParameter("TTID", typeof(int));
    
            var reconDateParameter = reconDate.HasValue ?
                new ObjectParameter("ReconDate", reconDate) :
                new ObjectParameter("ReconDate", typeof(System.DateTime));
    
            var reconCodeParameter = reconCode != null ?
                new ObjectParameter("ReconCode", reconCode) :
                new ObjectParameter("ReconCode", typeof(string));
    
            var reconInflowParameter = reconInflow.HasValue ?
                new ObjectParameter("ReconInflow", reconInflow) :
                new ObjectParameter("ReconInflow", typeof(decimal));
    
            var outFLowParameter = outFLow.HasValue ?
                new ObjectParameter("OutFLow", outFLow) :
                new ObjectParameter("OutFLow", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertBlotterReconBreakups", dataTypeParameter, tTIDParameter, reconDateParameter, reconCodeParameter, reconInflowParameter, outFLowParameter, noteParameter, userIDParameter, bRParameter);
        }
    
        public virtual int SP_UpdateBlotterReconBreakups(Nullable<long> sNO, string dataType, Nullable<int> tTID, Nullable<System.DateTime> reconDate, string reconCode, Nullable<decimal> reconInflow, Nullable<decimal> recon_OutFLow, string note, Nullable<int> userID, Nullable<int> bR)
        {
            var sNOParameter = sNO.HasValue ?
                new ObjectParameter("SNO", sNO) :
                new ObjectParameter("SNO", typeof(long));
    
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var tTIDParameter = tTID.HasValue ?
                new ObjectParameter("TTID", tTID) :
                new ObjectParameter("TTID", typeof(int));
    
            var reconDateParameter = reconDate.HasValue ?
                new ObjectParameter("ReconDate", reconDate) :
                new ObjectParameter("ReconDate", typeof(System.DateTime));
    
            var reconCodeParameter = reconCode != null ?
                new ObjectParameter("ReconCode", reconCode) :
                new ObjectParameter("ReconCode", typeof(string));
    
            var reconInflowParameter = reconInflow.HasValue ?
                new ObjectParameter("ReconInflow", reconInflow) :
                new ObjectParameter("ReconInflow", typeof(decimal));
    
            var recon_OutFLowParameter = recon_OutFLow.HasValue ?
                new ObjectParameter("Recon_OutFLow", recon_OutFLow) :
                new ObjectParameter("Recon_OutFLow", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateBlotterReconBreakups", sNOParameter, dataTypeParameter, tTIDParameter, reconDateParameter, reconCodeParameter, reconInflowParameter, recon_OutFLowParameter, noteParameter, userIDParameter, bRParameter);
        }
    
        public virtual int f_SP_FXGapPovitHBL(string product, string cost, string port, string ccy, string conditionStr, Nullable<System.DateTime> fromDt, Nullable<System.DateTime> toDt)
        {
            var productParameter = product != null ?
                new ObjectParameter("Product", product) :
                new ObjectParameter("Product", typeof(string));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var ccyParameter = ccy != null ?
                new ObjectParameter("ccy", ccy) :
                new ObjectParameter("ccy", typeof(string));
    
            var conditionStrParameter = conditionStr != null ?
                new ObjectParameter("ConditionStr", conditionStr) :
                new ObjectParameter("ConditionStr", typeof(string));
    
            var fromDtParameter = fromDt.HasValue ?
                new ObjectParameter("fromDt", fromDt) :
                new ObjectParameter("fromDt", typeof(System.DateTime));
    
            var toDtParameter = toDt.HasValue ?
                new ObjectParameter("toDt", toDt) :
                new ObjectParameter("toDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_SP_FXGapPovitHBL", productParameter, costParameter, portParameter, ccyParameter, conditionStrParameter, fromDtParameter, toDtParameter);
        }
    
        public virtual int SP_ADD_ECRRCarryForwardData(Nullable<System.DateTime> date, Nullable<int> bR)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ADD_ECRRCarryForwardData", dateParameter, bRParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_FillManualDealByDate()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FillManualDealByDate");
        }
    
        public virtual int SP_FillManualDealsBySchedule(Nullable<System.DateTime> currentDT, Nullable<int> br)
        {
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            var brParameter = br.HasValue ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FillManualDealsBySchedule", currentDTParameter, brParameter);
        }
    
        public virtual int SP_FillManualDealsBySchedule1(Nullable<System.DateTime> currentDT, Nullable<System.DateTime> endDate, string br)
        {
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FillManualDealsBySchedule1", currentDTParameter, endDateParameter, brParameter);
        }
    
        public virtual int SP_FillManualDealsByScheduleBR1(Nullable<System.DateTime> currentDT)
        {
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FillManualDealsByScheduleBR1", currentDTParameter);
        }
    
        public virtual int SP_FillManualDealsByScheduleBR2(Nullable<System.DateTime> currentDT)
        {
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FillManualDealsByScheduleBR2", currentDTParameter);
        }
    
        public virtual int SP_FXBorrowingLending(string product1, string cost, string port, string ccy, Nullable<System.DateTime> fromDt, Nullable<System.DateTime> toDt)
        {
            var product1Parameter = product1 != null ?
                new ObjectParameter("Product1", product1) :
                new ObjectParameter("Product1", typeof(string));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var ccyParameter = ccy != null ?
                new ObjectParameter("ccy", ccy) :
                new ObjectParameter("ccy", typeof(string));
    
            var fromDtParameter = fromDt.HasValue ?
                new ObjectParameter("fromDt", fromDt) :
                new ObjectParameter("fromDt", typeof(System.DateTime));
    
            var toDtParameter = toDt.HasValue ?
                new ObjectParameter("toDt", toDt) :
                new ObjectParameter("toDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FXBorrowingLending", product1Parameter, costParameter, portParameter, ccyParameter, fromDtParameter, toDtParameter);
        }
    
        public virtual int SP_FXMaturityProfileHBL(string product1, string cost, string port, string ccy, Nullable<System.DateTime> fromDt, Nullable<System.DateTime> toDt)
        {
            var product1Parameter = product1 != null ?
                new ObjectParameter("Product1", product1) :
                new ObjectParameter("Product1", typeof(string));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var ccyParameter = ccy != null ?
                new ObjectParameter("ccy", ccy) :
                new ObjectParameter("ccy", typeof(string));
    
            var fromDtParameter = fromDt.HasValue ?
                new ObjectParameter("fromDt", fromDt) :
                new ObjectParameter("fromDt", typeof(System.DateTime));
    
            var toDtParameter = toDt.HasValue ?
                new ObjectParameter("toDt", toDt) :
                new ObjectParameter("toDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FXMaturityProfileHBL", product1Parameter, costParameter, portParameter, ccyParameter, fromDtParameter, toDtParameter);
        }
    
        public virtual int SP_FXMaturityProfileHBL_AI(string product1, string cost, string port, string ccy, Nullable<System.DateTime> fromDt, Nullable<System.DateTime> toDt)
        {
            var product1Parameter = product1 != null ?
                new ObjectParameter("Product1", product1) :
                new ObjectParameter("Product1", typeof(string));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var ccyParameter = ccy != null ?
                new ObjectParameter("ccy", ccy) :
                new ObjectParameter("ccy", typeof(string));
    
            var fromDtParameter = fromDt.HasValue ?
                new ObjectParameter("fromDt", fromDt) :
                new ObjectParameter("fromDt", typeof(System.DateTime));
    
            var toDtParameter = toDt.HasValue ?
                new ObjectParameter("toDt", toDt) :
                new ObjectParameter("toDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FXMaturityProfileHBL_AI", product1Parameter, costParameter, portParameter, ccyParameter, fromDtParameter, toDtParameter);
        }
    
        public virtual int SP_FXMaturityProfileHBL01(string product1, string cost, string port, string ccy, Nullable<System.DateTime> fromDt, Nullable<System.DateTime> toDt)
        {
            var product1Parameter = product1 != null ?
                new ObjectParameter("Product1", product1) :
                new ObjectParameter("Product1", typeof(string));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var ccyParameter = ccy != null ?
                new ObjectParameter("ccy", ccy) :
                new ObjectParameter("ccy", typeof(string));
    
            var fromDtParameter = fromDt.HasValue ?
                new ObjectParameter("fromDt", fromDt) :
                new ObjectParameter("fromDt", typeof(System.DateTime));
    
            var toDtParameter = toDt.HasValue ?
                new ObjectParameter("toDt", toDt) :
                new ObjectParameter("toDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FXMaturityProfileHBL01", product1Parameter, costParameter, portParameter, ccyParameter, fromDtParameter, toDtParameter);
        }
    
        public virtual int SP_FXNostroBlotterHBL(string product1, string cost, string port, string ccy, Nullable<System.DateTime> fromDt, Nullable<System.DateTime> toDt, string flag)
        {
            var product1Parameter = product1 != null ?
                new ObjectParameter("Product1", product1) :
                new ObjectParameter("Product1", typeof(string));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var ccyParameter = ccy != null ?
                new ObjectParameter("ccy", ccy) :
                new ObjectParameter("ccy", typeof(string));
    
            var fromDtParameter = fromDt.HasValue ?
                new ObjectParameter("fromDt", fromDt) :
                new ObjectParameter("fromDt", typeof(System.DateTime));
    
            var toDtParameter = toDt.HasValue ?
                new ObjectParameter("toDt", toDt) :
                new ObjectParameter("toDt", typeof(System.DateTime));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FXNostroBlotterHBL", product1Parameter, costParameter, portParameter, ccyParameter, fromDtParameter, toDtParameter, flagParameter);
        }
    
        public virtual int SP_FXNostroTradingHBL(string product1, string cost, string port, string ccy, Nullable<System.DateTime> fromDt, Nullable<System.DateTime> toDt, string flag)
        {
            var product1Parameter = product1 != null ?
                new ObjectParameter("Product1", product1) :
                new ObjectParameter("Product1", typeof(string));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var ccyParameter = ccy != null ?
                new ObjectParameter("ccy", ccy) :
                new ObjectParameter("ccy", typeof(string));
    
            var fromDtParameter = fromDt.HasValue ?
                new ObjectParameter("fromDt", fromDt) :
                new ObjectParameter("fromDt", typeof(System.DateTime));
    
            var toDtParameter = toDt.HasValue ?
                new ObjectParameter("toDt", toDt) :
                new ObjectParameter("toDt", typeof(System.DateTime));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FXNostroTradingHBL", product1Parameter, costParameter, portParameter, ccyParameter, fromDtParameter, toDtParameter, flagParameter);
        }
    
        public virtual int SP_FXNostroTradingHBL01(string product1, string cost, string port, string ccy, Nullable<System.DateTime> fromDt, Nullable<System.DateTime> toDt, string flag)
        {
            var product1Parameter = product1 != null ?
                new ObjectParameter("Product1", product1) :
                new ObjectParameter("Product1", typeof(string));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var ccyParameter = ccy != null ?
                new ObjectParameter("ccy", ccy) :
                new ObjectParameter("ccy", typeof(string));
    
            var fromDtParameter = fromDt.HasValue ?
                new ObjectParameter("fromDt", fromDt) :
                new ObjectParameter("fromDt", typeof(System.DateTime));
    
            var toDtParameter = toDt.HasValue ?
                new ObjectParameter("toDt", toDt) :
                new ObjectParameter("toDt", typeof(System.DateTime));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_FXNostroTradingHBL01", product1Parameter, costParameter, portParameter, ccyParameter, fromDtParameter, toDtParameter, flagParameter);
        }
    
        public virtual ObjectResult<SP_Get_SBPBlotterConversionRate_Result> SP_Get_SBPBlotterConversionRate(Nullable<int> cCYID, string bR)
        {
            var cCYIDParameter = cCYID.HasValue ?
                new ObjectParameter("CCYID", cCYID) :
                new ObjectParameter("CCYID", typeof(int));
    
            var bRParameter = bR != null ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Get_SBPBlotterConversionRate_Result>("SP_Get_SBPBlotterConversionRate", cCYIDParameter, bRParameter);
        }
    
        public virtual ObjectResult<SP_GetCRRFINCONPeriods_Result> SP_GetCRRFINCONPeriods(Nullable<int> bR)
        {
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetCRRFINCONPeriods_Result>("SP_GetCRRFINCONPeriods", bRParameter);
        }
    
        public virtual ObjectResult<SP_GetNostroBankFromOPICS_Result> SP_GetNostroBankFromOPICS(Nullable<int> currencyId, string bR)
        {
            var currencyIdParameter = currencyId.HasValue ?
                new ObjectParameter("currencyId", currencyId) :
                new ObjectParameter("currencyId", typeof(int));
    
            var bRParameter = bR != null ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetNostroBankFromOPICS_Result>("SP_GetNostroBankFromOPICS", currencyIdParameter, bRParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int SP_InsertBranchBalances(Nullable<System.DateTime> branch_Date, Nullable<decimal> branch_InFlow, Nullable<decimal> branch_OutFLow, string note, Nullable<int> userId, Nullable<int> bR, string branchName, Nullable<int> curId)
        {
            var branch_DateParameter = branch_Date.HasValue ?
                new ObjectParameter("Branch_Date", branch_Date) :
                new ObjectParameter("Branch_Date", typeof(System.DateTime));
    
            var branch_InFlowParameter = branch_InFlow.HasValue ?
                new ObjectParameter("Branch_InFlow", branch_InFlow) :
                new ObjectParameter("Branch_InFlow", typeof(decimal));
    
            var branch_OutFLowParameter = branch_OutFLow.HasValue ?
                new ObjectParameter("Branch_OutFLow", branch_OutFLow) :
                new ObjectParameter("Branch_OutFLow", typeof(decimal));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            var branchNameParameter = branchName != null ?
                new ObjectParameter("BranchName", branchName) :
                new ObjectParameter("BranchName", typeof(string));
    
            var curIdParameter = curId.HasValue ?
                new ObjectParameter("CurId", curId) :
                new ObjectParameter("CurId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_InsertBranchBalances", branch_DateParameter, branch_InFlowParameter, branch_OutFLowParameter, noteParameter, userIdParameter, bRParameter, branchNameParameter, curIdParameter);
        }
    
        public virtual int SP_MMMaturityProfileHBL(string product1, string cost, string port, string ccy, Nullable<System.DateTime> fromDt, Nullable<System.DateTime> toDt)
        {
            var product1Parameter = product1 != null ?
                new ObjectParameter("Product1", product1) :
                new ObjectParameter("Product1", typeof(string));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var ccyParameter = ccy != null ?
                new ObjectParameter("ccy", ccy) :
                new ObjectParameter("ccy", typeof(string));
    
            var fromDtParameter = fromDt.HasValue ?
                new ObjectParameter("fromDt", fromDt) :
                new ObjectParameter("fromDt", typeof(System.DateTime));
    
            var toDtParameter = toDt.HasValue ?
                new ObjectParameter("toDt", toDt) :
                new ObjectParameter("toDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_MMMaturityProfileHBL", product1Parameter, costParameter, portParameter, ccyParameter, fromDtParameter, toDtParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int SP_SBPBlotter01()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotter01");
        }
    
        public virtual int SP_SBPBlotter03(string br)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotter03", brParameter);
        }
    
        public virtual int SP_SBPBlotter55(string br)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotter55", brParameter);
        }
    
        public virtual int SP_SBPBlotter66(string br)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotter66", brParameter);
        }
    
        public virtual ObjectResult<SP_SBPBlotterBR1_Result> SP_SBPBlotterBR1(string br, Nullable<System.DateTime> currentDT, string dataType)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SBPBlotterBR1_Result>("SP_SBPBlotterBR1", brParameter, currentDTParameter, dataTypeParameter);
        }
    
        public virtual int SP_SBPBlotterBR1_20210803(string br, Nullable<System.DateTime> currentDT)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotterBR1_20210803", brParameter, currentDTParameter);
        }
    
        public virtual int SP_SBPBlotterBR1_BAK(string br)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotterBR1_BAK", brParameter);
        }
    
        public virtual int SP_SBPBlotterBR11(string br)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotterBR11", brParameter);
        }
    
        public virtual int SP_SBPBlotterBR2(string br, string dataType, Nullable<System.DateTime> currentDT)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            var dataTypeParameter = dataType != null ?
                new ObjectParameter("DataType", dataType) :
                new ObjectParameter("DataType", typeof(string));
    
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotterBR2", brParameter, dataTypeParameter, currentDTParameter);
        }
    
        public virtual int SP_SBPBlotterCRRReportGenerator(Nullable<System.DateTime> currentDT, Nullable<int> bR)
        {
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            var bRParameter = bR.HasValue ?
                new ObjectParameter("BR", bR) :
                new ObjectParameter("BR", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotterCRRReportGenerator", currentDTParameter, bRParameter);
        }
    
        public virtual int SP_SBPBlotterRunningBal(string br, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotterRunningBal", brParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int SP_SBPBlotterRunningBalBR1(string br, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotterRunningBalBR1", brParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int SP_SBPBlotterRunningBalBR2(string br, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotterRunningBalBR2", brParameter, startDateParameter, endDateParameter);
        }
    
        public virtual int SP_SBPBlotterxx(string br)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPBlotterxx", brParameter);
        }
    
        public virtual int SP_SBPFillDumBlotterBR1(string br, Nullable<System.DateTime> currentDT)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPFillDumBlotterBR1", brParameter, currentDTParameter);
        }
    
        public virtual int SP_SBPFillDumBlotterBR2(string br, Nullable<System.DateTime> currentDT)
        {
            var brParameter = br != null ?
                new ObjectParameter("Br", br) :
                new ObjectParameter("Br", typeof(string));
    
            var currentDTParameter = currentDT.HasValue ?
                new ObjectParameter("CurrentDT", currentDT) :
                new ObjectParameter("CurrentDT", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPFillDumBlotterBR2", brParameter, currentDTParameter);
        }
    
        public virtual int SP_SBPOpicsSystemDate(string brCode)
        {
            var brCodeParameter = brCode != null ?
                new ObjectParameter("BrCode", brCode) :
                new ObjectParameter("BrCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SBPOpicsSystemDate", brCodeParameter);
        }
    
        public virtual int SP_TMU_PORTFOLIO(string pType, string cost, string port, string ccy, Nullable<System.DateTime> fromDt, Nullable<System.DateTime> toDt)
        {
            var pTypeParameter = pType != null ?
                new ObjectParameter("PType", pType) :
                new ObjectParameter("PType", typeof(string));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var portParameter = port != null ?
                new ObjectParameter("port", port) :
                new ObjectParameter("port", typeof(string));
    
            var ccyParameter = ccy != null ?
                new ObjectParameter("ccy", ccy) :
                new ObjectParameter("ccy", typeof(string));
    
            var fromDtParameter = fromDt.HasValue ?
                new ObjectParameter("fromDt", fromDt) :
                new ObjectParameter("fromDt", typeof(System.DateTime));
    
            var toDtParameter = toDt.HasValue ?
                new ObjectParameter("toDt", toDt) :
                new ObjectParameter("toDt", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_TMU_PORTFOLIO", pTypeParameter, costParameter, portParameter, ccyParameter, fromDtParameter, toDtParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
